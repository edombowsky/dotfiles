# [[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
#     && echo "$( date +%T%z ) Begin sourcing .zshenv..." \
#     || echo "$( date +%T.%N%z ) Begin sourcing .zshenv..."

# In case this is not set which is likely in git-bash
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:=$HOME/.config}

#|+++++++++++++++++++++++++++++++++++++
#| Permissions encoding used by umask |
#|+++++++++++++++++++++++++++++++++++++
#|  Octal  |  Binary  |  Permissions  |
#|====================================|
#|    0    |   000    |      rwx      |
#|    1    |   001    |      rw-      |
#|    2    |   010    |      r-x      |
#|    3    |   011    |      r--      |
#|    4    |   100    |      -wx      |
#|    5    |   101    |      -w-      |
#|    6    |   110    |      --x      |
#|    7    |   111    |    (none)     |
#|+++++++++++++++++++++++++++++++++++++
umask 022

# Comment out for now
# export BASE_MAVEN_OPTS="-Xmx1G -DargLine=-Djdk.attach.allowAttachSelf=true"
# export BASE_JDK_JAVA_OPTIONS="-Djdk.attach.allowAttachSelf=true"

# Munge the PATH variable. Will not add duplicates and you can add
# before or after PATH.
#
# Example:   pathmunge /usr/local/opt/sqlite/bin before; export PATH
#
pathmunge() {
    case ":${PATH}:" in
        *:"$1":*)
            # case is equivalent to
            # if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
            # printf "Suppressed adding a duplicate to PATH [$1]\n"
            ;;

        *)
            if [ -d "$1" ]; then
                if [ "$2" = "after" ] ; then
                    # printf "Adding [$1] after PATH\n"
                    PATH=$PATH:$1
                else
                    # printf "Adding [$1] before PATH\n"
                    PATH=$1:$PATH
                fi
            else
                # printf "Skipped adding [$1] to PATH as it does not exist\n"
            fi
            ;;
    esac
}

# function to avoid adding duplicate entries to the LD_LIBRARY_PATH
ldpathmunge() {
    case ":${LD_LIBRARY_PATH}:" in
        *:"$1":*)
            # printf "Suppressed adding a duplicate to LD_LIBRARY_PATH [$1]"
            ;;
        *)
            if [ "$2" = "after" ] ; then
                LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$1
            else
                LD_LIBRARY_PATH=$1:$LD_LIBRARY_PATH
            fi
            ;;
    esac
}

# function to avoid adding duplicate entries to the MANPATH
manpathmunge() {
    case ":${MANPATH}:" in
        *:"$1":*)
            # printf "Suppressed adding a duplicate to MANPATH [$1]"
            ;;
        *)
            if [ "$2" = "after" ] ; then
                MANPATH=$MANPATH:$1
            else
                MANPATH=$1:$MANPATH
            fi
            ;;
    esac
}

# All  of the above munge functions could be replaced by the following:
# function to avoid adding duplicate entries to a "path" or any shell
# variable for that matter
#
# Usage:
#
#   pathmunge PATH ~/bin
#   pathmunge MANPATH /usr/local/man after
#
#  Note the "declare -n" wasn't introduced until GNU bash 4.3
# pathmunge () {
#     declare -n thepath=$1
#     case ":${thepath}:" in
#         *:"$2":*)
#             ;
#         *)
#             if [ "$3" = "after" ] ; then
#                 thepath=$thepath:$2
#             else
#                 thepath=$2:$thepath
#             fi
#             ;;
#     esac
# }

pathmunge $HOME/.local/bin after; export PATH
pathmunge $HOME/bin before; export PATH

realpath() {
    if ! pushd $1 &> /dev/null; then
        pushd ${1##*/} &> /dev/null
        echo $( pwd -P )/${1%/*}
    else
        pwd -P
    fi
    popd > /dev/null
}

removeFromPath() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}

# -------------------------------------
# Proxy settings
# -------------------------------------
#export PROXY_SERVER=access618.cws.sco.cisco.com
#export PROXY_SERVER_PORT=8080
export PROXY_SERVER=geo-cluster125184-swg.ibosscloud.com
export PROXY_SERVER_PORT=8082

proxy() {
    if [ -z "$1" ]; then
        OUTPUT=$(env | grep -i http_proxy | grep -vi no_proxy | wc -l)
        if [ "$OUTPUT" -gt 0 ]; then
            echo "Proxy seems to be ON"
        else
            echo "Proxy seems to be OFF"
        fi
    elif [ "${1,,}" = "on" ]; then
        proxyon
        echo "Turned proxy ON"
    elif [ "${1,,}" = "off" ]; then
        proxyoff
        echo "Turned proxy OFF"
    elif [ "${1,,}" = "list" ]; then
        env | grep -i proxy | grep -vi no_proxy
    else
        echo "Don't understand $1, must be on/off/list/or empty"
    fi
}

proxyon() {
    unset {http,https,ftp,socks}_proxy
    unset {HTTP,HTTPS,FTP,SOCKS}_PROXY

    export {HTTP,HTTPS,SOCKS}_PROXY=http://${PROXY_SERVER}:${PROXY_SERVER_PORT}/
    export {http,https,socks}_proxy=http://${PROXY_SERVER}:${PROXY_SERVER_PORT}/
    export ftp_proxy=ftp://${PROXY_SERVER}:${PROXY_SERVER_PORT}/
    export FTP_PROXY=ftp://${PROXY_SERVER}:${PROXY_SERVER_PORT}/

    export MAVEN_OPTS="$BASE_MAVEN_OPTS -Dhttp.proxyHost=${PROXY_SERVER} -Dhttp.proxyPort=${PROXY_SERVER_PORT} -Dhttps.proxyHost=${PROXY_SERVER} -Dhttps.proxyPort=${PROXY_SERVER_PORT}"
    # export JDK_JAVA_OPTIONS=$BASE_JDK_JAVA_OPTIONS
}

proxyoff() {
    unset {http,https,ftp,socks}_proxy
    unset {HTTP,HTTPS,FTP,SOCKS}_PROXY

    export MAVEN_OPTS=$BASE_MAVEN_OPTS
    # export JDK_JAVA_OPTIONS=$BASE_JDK_JAVA_OPTIONS
}

noproxy() {
    export no_proxy=localhost,127.0.0.0/8,*.abb.com,::1,10.*.*.*,wttr.in
    export NO_PROXY=localhost,127.0.0.0/8,*.abb.com,::1,10.*.*.*,wttr.in

    export MAVEN_OPTS=$BASE_MAVEN_OPTS
    # export JDK_JAVA_OPTIONS=$BASE_JDK_JAVA_OPTIONS
}

# Turn proxy on by default
#proxyon
noproxy

# #######################################
# DEVELOPMENT SETTINGS
# #######################################
# -------------------------------
# Scala and SBT settings
#---------------------------------
export SBT_OPTS="-Xmx2G -Xss4M -XX:+CMSClassUnloadingEnabled"

# -------------------------------
# GO settings
#---------------------------------
export GOPRIVATE=abb-es.visualstudio.com
export GOPATH=$HOME/go
pathmunge $GOPATH/bin after; export PATH

[[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
    && [[ -f ~/.mac_zshenv ]] && source ~/.mac_zshenv

# [[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
#     && echo "$( date +%T%z ) End sourcing .zshenv..." \
#     || echo "$( date +%T.%N%z ) End sourcing .zshenv..."
