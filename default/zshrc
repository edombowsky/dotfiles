# If not running interactively, don't do anything
[[ $- == *i* ]] || return
# case $- in
#     *i*) ;;
#       *) return;;
# esac

# [[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
#     && echo "$( date +%T%z ) Begin sourcing .zshrc..." \
#     || echo "$( date +%T.%N%z ) Begin sourcing .zshrc..."

# --------------------------------------------------------------------
# General options
# --------------------------------------------------------------------
set bell-style none

# Automatically trim long paths in the prompt (requires Bash 4.x)
# zsh? PROMPT_DIRTRIM=0

# Enable history expansion with space
# E.g. typing !!<space> will replace the !! with your last command
bindkey ' ' magic-space

# Immediately add a trailing slash when auto-completing symlinks to directories
# zsh? g46bind "set mark-symlinked-directories on"

# Turn on recursive globbing (enables ** to recurse all directories and subdirectories)
shopt -s globstar 2> /dev/null

# --------------------------------------------------------------------
# Sane history defaults
# --------------------------------------------------------------------
setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

HISTFILE=~/.zsh_history
setopt EXTENDED_HISTORY          # add timestamp in unix epoch time and elapsed time of the command
setopt HIST_EXPIRE_DUPS_FIRST    # expire duplicates first
setopt HIST_FIND_NO_DUPS         # ignore duplicates when searching
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE         # do not store duplications
setopt HIST_REDUCE_BLANKS        # removes blank lines from history
setopt HIST_NO_FUNCTIONS         # remove function definitions from the history list.
setopt HIST_NO_STORE             # remove the history (fc -l) command
setopt HIST_SAVE_NO_DUPS         # when writing history file, older commands that duplicate newer ones are omitted
setopt HIST_VERIFY               # perform history expansion and reload the line into the editing buffer rather direct execution
setopt SHARE_HISTORY             # share history across multiple zsh sessions

HISTORY_IGNORE='([ \t]*|[bf]g *}exit|[alsh]#( *)#|history *|clear|ps|cd ~|cd ..|--|pwd|clear|reset|h|vi[m,] *)'

# sets the number of commands to remember in the command history
HISTSIZE=10000
# sets the maximum number of lines contained on the history file
HISTFILESIZE=20000

setopt NO_CASE_GLOB
setopt MAGIC_EQUAL_SUBST

# --------------------------------------------------------------------
# Customise less
# --------------------------------------------------------------------
# export LESS="-cisQMgRwPmFX -Pm<--Less--> -PM?f%f:<stdin>. ?n?m(file %i of %m) ..?ltlines %lt-%lb?L/%L. : byte %bB?s/%s. .?e(END) ?x- Next\: %x.:?pB%pB\%..%t\$"
# export LESS="-cisQMgFRw -Pm<--Less--> -PM?f%f:<stdin>. ?n?m(file %i of %m) ..?ltlines %lt-%lb?L/%L. : byte %bB?s/%s. .?e(END) ?x- Next\: %x.:?pB%pB\%..%t\$"
export LESS="-cisQMgRw -PM?n?f%f .?m(file %i of %m) ..?e(End) ?x- Next\: %x.: ?pB%pB\%:byte %bB?s/%s...%t ?f%f .?n?m(file %i of %m) ..?ltlines %lt-%lb?L/%L. : byte %bB?s/%s. .?e(End) ?x- Next\: %x.:?pB%pB\%..%t\$"
export LESSKEY=${HOME}/.less_${OS}
export LESSBINFMT='*u[%X]'  # Underline non-printable characters and print them in hex inside square brackets
export LESSEDIT="%E --no-wait ?lm+%lm. %f"
export LESSSECURE=1
# export PAGER="less -cisQMgRw  -PM'<man page> ?ltlines %lt-%lb?L/%L. : byte %bB?s/%s. .?e(END):?pB%pB\%..%t'"
# export PAGER="less -s  -PM'<man page> ?ltlines %lt-%lb?L/%L. : byte %bB?s/%s. .?e(END):?pB%pB\%..%t'"
export PAGER=less

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# --------------------------------------------------------------------
# Customise ripgrep
# --------------------------------------------------------------------
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

export EDITOR=vim
export VISUAL=vim

# --------------------------------------------------------------------
# BAT configuration
# --------------------------------------------------------------------
export BAT_PAGER="less -R"

# --------------------------------------------------------------------
# FZF configuration zsh
# --------------------------------------------------------------------
# original export FZF_DEFAULT_COMMAND="rg --files --hidden --no-ignore-dot --follow"
export FZF_DEFAULT_COMMAND="fd --type f --color=never --hidden --exclude '.git' --exclude '.cache'"
export FZF_DEFAULT_OPTS=" \
    --no-height \
    --info=inline \
    --layout=reverse \
    --preview-window=:hidden \
    --multi \
    --cycle \
    --color=bg+:#343d46,gutter:-1,pointer:#ff3c3c,info:#0dbc79,hl:#0dbc79,hl+:#23d18b \
    --ansi \
    --bind '?:toggle-preview' \
    --bind 'ctrl-a:select-all' \
    --bind 'ctrl-e:execute(echo {+} | xargs -o nvim)'
    --bind 'ctrl-y:execute-silent(echo {+} | pbcopy)'
    --bind 'ctrl-v:execute(code {+})'"

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# The --preview option takes a command that is executed for the current line
# and its output is displayed on the preview window. First, we check if the
# string is a file, and if so, we try to open it with bat, if that fails, we
# fall back to cat:
#
#     ([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {}))
#
# If the string is not a file, we check if it is a directory. If so, we try to
# open it with tree, if that fails, we fall back to less:
#
#     ([[ -d {} ]] && (tree -C {} | less))
#
# If it's not a file or directory, our last resource is to echo it:
#
#     echo {}
#
# Finally, we redirect any errors to /dev/null and return the first 200 lines:
#
#     2> /dev/null | head -200
export FZF_CTRL_T_OPTS="--preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'"
#export FZF_CTRL_T_OPTS="--preview '[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2>/dev/null | head -300'"

export FZF_ALT_C_COMMAND='fd --type d . --color=never --hidden'
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -50'"

# File generated by the command
#     $(brew --prefix)/opt/fzf/install
[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh

# I use iterm2 and there ALT-C is processed as ç
bindkey "ç" fzf-cd-widget

# --------------------------------------------------------------------
# Completions
# --------------------------------------------------------------------
# Setup a custom completions directory
fpath=(~/.zsh/completion $fpath)

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
if [[ "${OSTYPE//[0-9.]/}" = 'darwin' ]]; then
    LS_COLORS=…
    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
    if whence dircolors >/dev/null; then
        export LS_COLORS
        alias ls='ls --color'
    else
        export CLICOLOR=1
        LSCOLORS=…
    fi
else
    eval "$(dircolors -b)"
    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
fi
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Load Git completion
# See https://dev.to/oliverspryn/adding-git-completion-to-zsh-26id
zstyle ':completion:*:*:git:*' script ~/.zsh/completion/git-completion.bash

## Enable the completion system and initialise all completions on $fpath and
## ignore (-i) all insecure files and directories
autoload -Uz compinit && compinit -i
autoload -U +X bashcompinit && bashcompinit

# --------------------------------------------------------------------
# Smarter TAB completion
# --------------------------------------------------------------------
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+l:|?=** r:|?=**'

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
# export ZSH="/home/wsl/.oh-my-zsh"
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# [[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
#     && ZSH_THEME="robbyrussell"
# [[ "${OSTYPE//[0-9.]/}" = 'linux-gnu' ]] \
#     && ZSH_THEME="powerlevel10k/powerlevel10k"

# ZSH_THEME="agnosterzak"
# [[ -f $HOME/.oh-my-zsh-theme.sh ]] && source $HOME/.oh-my-zsh-theme.sh

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git)

# source $ZSH/oh-my-zsh.sh

# User configuration

# It's very often the case where you might end up with issues on indexing 
# folders where you don’t have permissions to index them for auto-complete.
ZSH_DISABLE_COMPFIX=true

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="code ~/.zshrc"
# alias ohmyzsh="code ~/.oh-my-zsh"

eval "$(oh-my-posh --init --shell zsh --config ~/.powerlevel10k_modern.omp.json)"

# --------------------------------------------------------------------
# Aliases and functions
# --------------------------------------------------------------------
[[ -f ~/.aliases ]] && source ~/.aliases
[[ -f ~/.functions ]] && source ~/.functions

[[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
    && [[ -f ~/.mac_zshrc ]] && source ~/.mac_zshrc
[[ "${OSTYPE//[0-9.]/}" = 'linux-gnu' ]] \
    && [[ -f ~/.wsl_zshrc ]] && source ~/.wsl_zshrc

# [[ "${OSTYPE//[0-9.]/}" = 'darwin' ]] \
#     && echo "$( date +%T%z ) End sourcing .zshrc..." \
#     || echo "$( date +%T.%N%z ) End sourcing .zshrc..."
